plugins {
    id 'eclipse'
    id 'idea'
    id 'java-library'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

jarJar.enable()

group = 'com.lovetropics.minigames'
base {
    archivesName = 'LTMinigames'
}

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'

if (System.getenv('GHA_RELEASE_WORKFLOW')) {
    version = "${mod_version}"
} else if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}-${release_type}+${buildnumber}-gha"
} else {
    project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'
    version = "${mod_version}-${release_type}+${buildnumber}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude 'testing/**'
}
sourceSets.test.resources {
    srcDir 'src/generated/resources'
    include 'testing/**'
    include 'data/ltminigames/structures/**'
}

runs {
    configureEach {
        workingDirectory project.file('run')

        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'warn'

        modSource project.sourceSets.main
    }

    client {
        programArguments.addAll '--username', 'Dev###'
    }

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
}

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

subsystems {
    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }
}

configurations {
    modImpl
    implementation.extendsFrom(modImpl)
    testImplementation.extendsFrom(modImpl)

    modRuntime
    runtimeOnly.extendsFrom(modRuntime)
    testRuntimeOnly.extendsFrom(modRuntime)

    modCompile
    compileOnly.extendsFrom(modCompile)
    testCompileOnly.extendsFrom(modCompile)
}

repositories {
    maven { url = "https://maven.ithundxr.dev/snapshots/" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://api.modrinth.com/maven" }
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    modRuntime 'maven.modrinth:tropicraft:9.7.0-1.21'

    // TODO: HACK - We get Registrate at runtime through JarJar from Tropicraft. We should rather prefer to depend on the slim jar.
    jarJar(modCompile("com.tterrag.registrate:Registrate:MC1.21-${registrate_version}")) {
        jarJar.ranged(it, "[MC1.21-${registrate_version},MC1.22)")
    }

    jarJar(modImpl("com.lovetropics.lib:LTLib:$ltlib_version"))

    testImplementation platform("org.junit:junit-bom:5.7.0")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
}

tasks.named('jarJar').configure {
    archiveClassifier = ''
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.java
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mod_version: mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
