plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7+'
}

jarJar.enable()

group = 'com.lovetropics.minigames'
base {
    archivesName = 'LTMinigames'
}

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'

if (System.getenv('GHA_RELEASE_WORKFLOW')) {
    version = "${mod_version}"
} else if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}-${release_type}+${buildnumber}-gha"
} else {
    project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'
    version = "${mod_version}-${release_type}+${buildnumber}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: parchment_version
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            copyIdeResources = true

            workingDirectory project.file('run')
            arg "-mixin.config=ltminigames.mixins.json"
            jvmArg '-Dmixin.env.disableRefMap=true'

            property 'forge.logging.console.level', 'info'

            mods {
                ltminigames {
                    source sourceSets.main
                }
            }
        }

        client {
            taskName 'ltminigames_client'
        }

        server {
            taskName 'ltminigames_server'
        }
        
        data {
            taskName 'ltminigames_data'

            environment 'target', 'fmluserdevdata'

            args '--mod', 'ltminigames', '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"',
                 '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"' 
            
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://api.modrinth.com/maven" }
    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    runtimeOnly fg.deobf('maven.modrinth:tropicraft:9.6.1-1.20.1')

    // TODO: HACK - We get Registrate at runtime through JarJar from Tropicraft. We should rather prefer to depend on the slim jar.
    jarJar(compileOnly(fg.deobf("com.tterrag.registrate:Registrate:$registrate_version"))) {
        jarJar.ranged(it, "[$registrate_version,MC1.21)")
    }

    jarJar(implementation(fg.deobf("com.lovetropics.lib:LTLib:$ltlib_version"))) {
        jarJar.ranged(it, "[1.3,1.4)")
    }

    // Annotation Processors
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }

    testImplementation platform("org.junit:junit-bom:5.7.0")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    finalizedBy 'reobfJar'

    manifest {
        attributes([
            "Specification-Title": "ltminigames",
            "Specification-Vendor": "lovetropics",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": archiveVersion,
            "Implementation-Vendor" :"lovetropics",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "ltminigames.mixins.json"
        ])
    }
}

tasks.named('jarJar').configure {
    archiveClassifier = ''
    finalizedBy 'reobfJarJar'
}

reobf {
    jarJar { }
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.java
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mod_version: mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

mixin {
    add sourceSets.main, "ltminigames.refmap.json"
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact sourceJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}
